// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CliToSegmentHostClient is the client API for CliToSegmentHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CliToSegmentHostClient interface {
	CreateAndConfigureSegments(ctx context.Context, in *SegmentConfigList, opts ...grpc.CallOption) (*SegmentStatusList, error)
}

type cliToSegmentHostClient struct {
	cc grpc.ClientConnInterface
}

func NewCliToSegmentHostClient(cc grpc.ClientConnInterface) CliToSegmentHostClient {
	return &cliToSegmentHostClient{cc}
}

func (c *cliToSegmentHostClient) CreateAndConfigureSegments(ctx context.Context, in *SegmentConfigList, opts ...grpc.CallOption) (*SegmentStatusList, error) {
	out := new(SegmentStatusList)
	err := c.cc.Invoke(ctx, "/main.CliToSegmentHost/createAndConfigureSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CliToSegmentHostServer is the server API for CliToSegmentHost service.
// All implementations must embed UnimplementedCliToSegmentHostServer
// for forward compatibility
type CliToSegmentHostServer interface {
	CreateAndConfigureSegments(context.Context, *SegmentConfigList) (*SegmentStatusList, error)
	mustEmbedUnimplementedCliToSegmentHostServer()
}

// UnimplementedCliToSegmentHostServer must be embedded to have forward compatible implementations.
type UnimplementedCliToSegmentHostServer struct {
}

func (UnimplementedCliToSegmentHostServer) CreateAndConfigureSegments(context.Context, *SegmentConfigList) (*SegmentStatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndConfigureSegments not implemented")
}
func (UnimplementedCliToSegmentHostServer) mustEmbedUnimplementedCliToSegmentHostServer() {}

// UnsafeCliToSegmentHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CliToSegmentHostServer will
// result in compilation errors.
type UnsafeCliToSegmentHostServer interface {
	mustEmbedUnimplementedCliToSegmentHostServer()
}

func RegisterCliToSegmentHostServer(s grpc.ServiceRegistrar, srv CliToSegmentHostServer) {
	s.RegisterService(&CliToSegmentHost_ServiceDesc, srv)
}

func _CliToSegmentHost_CreateAndConfigureSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentConfigList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToSegmentHostServer).CreateAndConfigureSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CliToSegmentHost/createAndConfigureSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToSegmentHostServer).CreateAndConfigureSegments(ctx, req.(*SegmentConfigList))
	}
	return interceptor(ctx, in, info, handler)
}

// CliToSegmentHost_ServiceDesc is the grpc.ServiceDesc for CliToSegmentHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CliToSegmentHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CliToSegmentHost",
	HandlerType: (*CliToSegmentHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createAndConfigureSegments",
			Handler:    _CliToSegmentHost_CreateAndConfigureSegments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
